name: Claude Bug Fix

on:
  issues:
    types: [opened, edited, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to fix'
        required: true
        type: number
      base_branch:
        description: 'Base branch for PR (default: master)'
        required: false
        type: string
        default: 'master'

jobs:
  auto-fix-bug:
    # bugラベルが付いているissueの場合のみ実行
    if: contains(github.event.issue.labels.*.name, 'bug') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write        # コードの修正とコミットに必要
      pull-requests: write   # PR作成に必要
      issues: read          # issueの内容を読むために必要
      id-token: write       # OAuth認証に必要

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # PR作成のため全履歴を取得

      - name: Get issue information
        id: get_issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = ${{ github.event.issue.number || inputs.issue_number }};

            // Issueの詳細を取得
            let issue;
            try {
              const { data } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number
              });
              issue = data;
            } catch (error) {
              core.setFailed(`❌ Issue #${issue_number} の情報を取得できませんでした: ${error.message}`);
              core.exportVariable('ERROR_MESSAGE', `Issue #${issue_number} が見つかりません`);
              return;
            }

            // Issue本文のバリデーション
            const issueBody = issue.body?.trim();

            if (!issueBody || issueBody.length === 0) {
              core.setFailed(`❌ Issue #${issue.number} の本文が空です。バグの詳細を記載してください。`);
              core.exportVariable('ERROR_MESSAGE', 'Issue本文が空です。バグの詳細（再現手順、エラーメッセージなど）を記載してください。');
              core.exportVariable('ISSUE_NUMBER', issue.number);
              return;
            }

            if (issueBody.length < 20) {
              core.setFailed(`❌ Issue #${issue.number} の本文が短すぎます（${issueBody.length}文字）。バグの詳細を記載してください。`);
              core.exportVariable('ERROR_MESSAGE', `Issue本文が短すぎます（${issueBody.length}文字）。バグ修正には以下の情報が必要です：\n- バグの再現手順\n- 期待される動作\n- 実際の動作\n- エラーメッセージ（あれば）`);
              core.exportVariable('ISSUE_NUMBER', issue.number);
              return;
            }

            // Issue情報をMarkdownファイルとして保存
            const fs = require('fs');
            const issueContent = '# Issue #' + issue.number + ': ' + issue.title + '\n\n' +
              '**作成者:** @' + issue.user.login + '\n' +
              '**状態:** ' + issue.state + '\n' +
              '**ラベル:** ' + issue.labels.map(l => l.name).join(', ') + '\n\n' +
              '## 説明\n\n' +
              issueBody + '\n';

            fs.writeFileSync('ISSUE_CONTEXT.md', issueContent);

            // 環境変数に保存
            core.exportVariable('ISSUE_NUMBER', issue.number);
            core.exportVariable('ISSUE_TITLE', issue.title);
            core.exportVariable('ISSUE_VALID', 'true');

      - name: Create fix branch
        if: env.ISSUE_VALID == 'true'
        run: |
          BASE_BRANCH="${{ inputs.base_branch || 'master' }}"
          ISSUE_NUMBER="${{ env.ISSUE_NUMBER }}"
          FIX_BRANCH="fix/issue-${ISSUE_NUMBER}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # ベースブランチから新しいブランチを作成
          git fetch origin "${BASE_BRANCH}"
          git checkout -b "${FIX_BRANCH}" "origin/${BASE_BRANCH}"
          git push -u origin "${FIX_BRANCH}"

          # 環境変数に保存
          echo "FIX_BRANCH=${FIX_BRANCH}" >> $GITHUB_ENV
          echo "BASE_BRANCH=${BASE_BRANCH}" >> $GITHUB_ENV

      - name: Run Claude Code to fix bug
        if: env.ISSUE_VALID == 'true'
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets[format('{0}_CLAUDE_CODE_OAUTH_TOKEN', github.actor)] }}

          prompt: |
            プロジェクトルートに配置されている **ISSUE_CONTEXT.md** ファイルを読んで、
            報告されたバグの内容を理解してから、修正作業を開始してください。

            **タスク:**
            1. ISSUE_CONTEXT.md を読んで、Issue の内容を確認する
            2. バグの原因を特定する（既存のソースコードを分析）
            3. 適切な修正を行う
            4. 修正内容を現在のブランチ (${{ env.FIX_BRANCH }}) にコミットする
            5. ${{ env.BASE_BRANCH }} ブランチに対するPull Requestを作成する

            **PR作成時の要件:**
            - PR タイトル: "Fix: [Issue #${{ env.ISSUE_NUMBER }}] ${{ env.ISSUE_TITLE }}"
            - PR 説明文に以下を含める:
              - バグの原因と修正内容の説明
              - 修正したファイルの概要
              - テスト方法（もしあれば）
              - `Close #${{ env.ISSUE_NUMBER }}` を記載（issueを自動クローズするため）

            **重要な制約:**
            - ISSUE_CONTEXT.md ファイルは削除すること（コミットしない）
            - コミットメッセージは適切に付けること

            修正が完了したら、作成したPRのURLを教えてください。

          # ファイル書き込み、git、ghコマンドを自動承認
          claude_args: '--allowedTools "Write" "Edit" "Read" "Bash(git *)" "Bash(gh pr:*)" "Bash(gh issue:*)"'

          additional_permissions: |
            contents: write
            pull-requests: write

      - name: Cleanup
        if: always()
        run: |
          # ISSUE_CONTEXT.mdを削除（念のため）
          rm -f ISSUE_CONTEXT.md

      - name: Comment on issue
        if: always() && env.ISSUE_NUMBER
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = ${{ env.ISSUE_NUMBER }};
            const error_message = process.env.ERROR_MESSAGE;
            const get_issue_status = '${{ steps.get_issue.outcome }}';
            const claude_status = '${{ steps.claude.outcome }}';

            let comment_body;

            // Issue情報取得で失敗した場合
            if (error_message) {
              comment_body = '⚠️ **自動バグ修正を開始できませんでした**\n\n' +
                '**理由:**\n' + error_message + '\n\n' +
                'Issue内容を追記してから、再度`bug`ラベルを付け直すか、手動でワークフローを実行してください。\n\n' +
                '[Actionsログを確認](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            }
            // Claude実行が成功した場合
            else if (claude_status === 'success') {
              comment_body = '✅ **Claudeによるバグ修正が完了しました！**\n\n' +
                '**ブランチ:** `${{ env.FIX_BRANCH }}`\n' +
                '**ベースブランチ:** `${{ env.BASE_BRANCH }}`\n\n' +
                '作成されたPull Requestを確認してください。';
            }
            // Claude実行が失敗した場合
            else if (claude_status === 'failure') {
              comment_body = '❌ **バグ修正中にエラーが発生しました**\n\n' +
                'Claudeによる修正処理中に問題が発生しました。\n' +
                '[Actionsログを確認](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})して、エラーの詳細を確認してください。';
            }
            // その他のエラー
            else {
              comment_body = '⚠️ **ワークフロー実行中に問題が発生しました**\n\n' +
                '[Actionsログを確認](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})してください。';
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: comment_body
            });
